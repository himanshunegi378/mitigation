import Head from "next/head";
import { useImmer } from "use-immer";
import dummyResponse from "@/util/dummyresponse";
import { memo, useRef, useState } from "react";
import { useTableData } from "@/contexts/dataContext";
import { useRouter } from "next/router";
import {
  fetchScreenRiskWeight,
  updateScreenQuestionMatrix,
  uploadScreenQuestionMatrix,
} from "@/api";

// This component is made to just memoize the Row and improve performance of each row by preventing re-rendering
const Row = memo(function Row({ row, i, setTableData }) {
  return (
    <tr>
      {row.map((cell, j) => (
        <td key={j}>
          <input
            type="text"
            value={cell}
            onChange={(e) => {
              const value = e.target.value;
              setTableData((draft) => {
                // check if number using regex
                // if last character is dot, then is string
                if (value.slice(-1) === ".") {
                  draft.rows[i][j] = value;
                  return;
                }

                if (value.match(/^-?\d*\.?\d*$/)) {
                  // is decimal
                  if (e.target.value.match(/^-?\d*\.?\d*$/)) {
                    draft.rows[i][j] = parseFloat(value);
                  } else {
                    draft.rows[i][j] = parseInt(value);
                  }
                } else {
                  draft.rows[i][j] = value;
                }
              });
            }}
          />
        </td>
      ))}
    </tr>
  );
});

export default function Home() {
  const router = useRouter();
  const { tableData, setTableData } = useTableData();
  const inputRef = useRef();
  const [excelFile, setExcelFile] = useState(null);

  const handleSubmit = async () => {
    if (excelFile) {
      const formData = new FormData();
      formData.append("file", excelFile);
      await uploadScreenQuestionMatrix(formData);
      inputRef.current.value = "";
      setExcelFile(null);
      fetchScreenRiskWeight().then(setTableData);
    } else {
      await updateScreenQuestionMatrix(tableData);
      router.push("/mitigation");
    }
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div
          style={{
            overflow: "auto",
            maxHeight: "90vh",
          }}
        >
          <table
            style={{
              overflow: "auto",
            }}
          >
            <thead>
              <tr>
                {tableData.headers.map((header, i) => (
                  <th
                    key={i}
                    style={{
                      position: "sticky",
                      top: 0,
                      backgroundColor: "white",
                      zIndex: 1,
                    }}
                  >
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {tableData.rows.map((row, i) => (
                <Row key={i} row={row} i={i} setTableData={setTableData} />
              ))}
            </tbody>
          </table>
        </div>
        <div>
          <input
            ref={inputRef}
            type="file"
            onChange={(e) => setExcelFile(e.target.files[0])}
            accept={".xlsx, .xls, .csv"}
          />
        </div>
        <button onClick={handleSubmit}>Submit Data</button>
      </main>
    </>
  );
}
